{
	"name": "ETL_DF_CDC",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "source_scd2_csv",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "emp_scd",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "SourceHash"
				},
				{
					"name": "filter1"
				},
				{
					"name": "TargetHash"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "exists2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          Firstname as string,",
				"          Lastname as string,",
				"          City as string,",
				"          Start_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          ID as integer,",
				"          Firstname as string,",
				"          Lastname as string,",
				"          City as string,",
				"          Start_Date as date,",
				"          end_date as date,",
				"          active_fl as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 select(mapColumn(",
				"          ID,",
				"          Firstname,",
				"          Lastname,",
				"          City,",
				"          Start_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 derive(hash_value = md5(Firstname,Lastname,City)) ~> SourceHash",
				"source2 filter(active_fl=='1') ~> filter1",
				"filter1 derive(Hashvaluetgt = md5(Firstname,Lastname,City)) ~> TargetHash",
				"select1 derive(ID = toInteger(ID)) ~> derivedColumn1",
				"SourceHash, TargetHash exists(derivedColumn1@ID == source2@ID,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 alterRow(insertIf(true())) ~> alterRow1",
				"TargetHash, SourceHash exists(and(source2@ID==derivedColumn1@ID, Hashvaluetgt!=hash_value),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2"
			]
		}
	}
}